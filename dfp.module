<?php

define('DFP_GOOGLE_TAG_SERVICES_URL', 'www.googletagservices.com/tag/js/gpt.js');

/**
 * Implements hook_help().
 */
function dfp_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dfp':
      $output = '<p>' . t('The Doubleclick For Publishers (DFP) module allows you to integrate Google Publisher Tags onto your site.') . '</p>';
      $output .= '<p>' . t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can display your ads as blocks, or add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dfp_permission() {
  return array(
    'administer DFP' => array(
      'title' => t('Administer Doubleclick for Publisher ads'),
      'description' => t('Users can create, edit, and delete Doubleclick for Publishers (dfp) ad tags and configure how and when they should be displayed.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dfp_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'dfp_tag' => array(
      'variables' => array(
        'tag' => NULL,
      ),
      'template' => 'theme/dfp_tag',
    ),
    'dfp_target_settings' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
    'dfp_color_settings' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_menu().
 */
function dfp_menu() {
  $items = array();

  $items['admin/structure/dfp_ads/settings'] = array(
    'title' => 'Global DFP Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your site-wide DFP settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dfp_admin_settings'),
    'access arguments' => array('administer DFP'),
    'file' => 'dfp.admin.inc',
    'weight' => 5,
  );
  $items['admin/structure/dfp_ads/test_page'] = array(
    'title' => 'DFP Test Page',
    'type' => MENU_LOCAL_TASK,
    'description' => "View all your DFP tags on a single page",
    'page callback' => 'dfp_test_page',
    'access arguments' => array('administer DFP'),
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_init()
 */
function dfp_init() {
  _dfp_js_google_tag_service();
  _dfp_js_header_script();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dfp_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Load function.
 */
function dfp_tag_load($machinename = '') {
  ctools_include('export');

  // Grab an array of all DFP tags or the specificed DFP tag.
  if (empty($machinename)) {
    $tags = ctools_export_load_object('dfp_tags');
  }
  else {
    $tags = ctools_export_load_object('dfp_tags', 'names', array($machinename));
  }

  // Build up the tag objects.
  foreach ($tags as &$tag) {
    // Initialize the tag before allowing other modules to alter it.
    $tag->settings = is_array($tag->settings) ? $tag->settings : unserialize($tag->settings);

    // Allow modules to alter the raw tag object.
    drupal_alter('dfp_tag_load', $tag);

    // Configure this tag based on the defined settings.
    $tag->unit = '/' . variable_get('dfp_network_id', '') . '/' . $tag->name;
    $tag->formatted_size = _dfp_format_size($tag->size);
    $tag->wrapper_id = 'dfp-ad-' . $tag->machinename;
    $tag->slug = $tag->settings['slug'] == '<none>' ? '' : $tag->settings['slug'];

    drupal_alter('dfp_tag', $tag);
  }

  return empty($machinename) ? $tags : array_shift($tags);
}

/**
 * Save a single tag.
 */
function dfp_tag_save(&$tag) {
  $update = (isset($tag->adid) && is_numeric($tag->adid)) ? array('adid') : array();
  return drupal_write_record('dfp_tag', $tag, $update);
}

/**
 * Page callback for the DFP test page. It displays all tags on the site.
 */
function dfp_test_page() {
  $output = array();
  $tags = dfp_tag_load();

  foreach ($tags as $tag) {
    $output[] = array(
      'tag name' => array(
        '#markup' => '<h3>' . $tag->name . '</h3>',
      ),
      'rendered tag' => array(
        '#theme' => 'dfp_tag',
        '#tag' => $tag,
      ),
    );
  }

  return $output;
}

/**
 * Helper function to include external tag service javascript file.
 */
function _dfp_js_google_tag_service() {
  // Inlclude a script tag for the Google Tag Services.
  // @todo: One day this should include an async=true attribute. See #1140356.
  $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
  $options = array(
    'type' => 'external',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
  );
  drupal_add_js($protocol . DFP_GOOGLE_TAG_SERVICES_URL, $options);
}

/**
 * Helper function to include javascript variables, etc in the header above all
 * slot definitions.
 */
function _dfp_js_header_script() {
  // Initialize the google varibales.
  $js = 'var googletag = googletag || {};' . "\n";
  $js .= 'googletag.cmd = googletag.cmd || [];' . "\n";

  // Inject user-defined javascript.
  $js .= variable_get('dfp_injected_js', '') . "\n";

  // Set global targeting values for this page.
  $targeting = variable_get('dfp_targeting', array());
  drupal_alter('dfp_page_targeting', $targeting);
  foreach ($targeting as $key => $target) {
    $js .= 'googletag.pubads().setTargeting("' . $target['target'] . '", ' . _dfp_format_target_value($target['value']) . ');' . "\n";
  }

  // Add global settings.
  $js = '';
  $js .= 'googletag.cmd.push(function() {' . "\n";
  if (variable_get('dfp_collapse_empty_divs', 1)) {
    $js .= '  googletag.pubads().collapseEmptyDivs();' . "\n";
  }
  if (variable_get('dfp_async_rendering', 1)) {
    $js .= '  googletag.pubads().enableAsyncRendering();' . "\n";
  }
  else {
    $js .= '  googletag.pubads().enableSyncRendering();' . "\n";
  }
  if (variable_get('dfp_single_request', 1)) {
    $js .= '  googletag.pubads().enableSingleRequest();' . "\n";
  }
  $js .= '});' . "\n";
  $js .= 'googletag.enableServices();' . "\n";

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
  );
  drupal_add_js($js, $options);
}

/**
 * Format the given array of values to be displayed as part of a javascript.
 *
 * @param array $values
 *   A simple array of targeting values. Ex. val1, val2, val3
 *
 * @return string
 *   If $values had one item, then a string in the format ["val1"]. If $values
 *   has more than one item, then a string in the format ["val1","val2","val3"].
 *
 */
function _dfp_format_target_value($values) {
  $formatted_values = '';

  // Convert the values into an array and trim the whitespace from each value.
  $values = explode(',', $values);
  array_filter(array_map('trim', $values));

  if (count($values) == 1) {
    $formatted_values = '"' . $values[0] . '"';
  }
  elseif (count($values) > 1) {
    $formatted_values = '["' . implode('","', $values) . '"]';
  }

  return $formatted_values;
}

/**
 * Format the the size of an ad tag.
 *
 * @param string $size
 *   A string in the format 123x321,987x789;
 *
 * @return string
 *   A string in the format [456, 654] or [[123, 321], [987, 789]]
 *
 */
function _dfp_format_size($size) {
  $formatted_sizes = array();

  $sizes = explode(',', $size);
  foreach ($sizes as $size) {
    $formatted_size = explode('x', trim($size));
    $formatted_sizes[] = '[' . implode(', ', $formatted_size) .']';
  }

  return count($formatted_sizes) == 1 ? $formatted_sizes[0] : '[' . implode(', ', $formatted_sizes) . ']';
}

/**
 * Preprocess function for DFP tags.
 */
function template_preprocess_dfp_tag(&$variables) {
  $tag = $variables['tag'];

  // Create the attributes for the wrapper div.
  $variables['wrapper_attributes'] = array(
    'id' => $tag->wrapper_id,
    'class' => array(
      'dfp-tag',
    ),
  );

  // Add the js needed to define this adSlot to <head>.
  $js = 'googletag.defineSlot("' . $tag->name . '", ' . $tag->formatted_size . ', "' . $tag->wrapper_id . '")' . "\n";
  $js .= '  .addService(googletag.pubads())' . "\n";
  if (!empty($tag->settings['ad_types'])) {
    $js .= '  .set("adsense_ad_types", "' . $tag->settings['ad_types'] . '")' . "\n";
  }
  foreach ($tag->settings['colors'] as $key => $val) {
    if (!empty($val)){
      $key = 'adsense_' . $key . '_color';
      $val = '#' . strtoupper($val);
      $js .= '  .set("' . $key . '", "' . $val . '")' . "\n";
    }
  }
  foreach ($tag->settings['targeting'] as $target) {
    $js .= '  .setTargeting("' . $target['target'] . '", ' . _dfp_format_target_value($target['value']) . ')' . "\n";
  }
  $js = rtrim($js, "\n") . ';' . "\n";

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
  );
  drupal_add_js($js, $options);
}
