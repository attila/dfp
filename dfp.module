<?php

define('DFP_GOOGLE_TAG_SERVICES_URL', 'www.googletagservices.com/tag/js/gpt.js');
define('DFP_GOOGLE_SHORT_TAG_SERVICES_URL', 'pubads.g.doubleclick.net/gampad');

/**
 * Implements hook_help().
 */
function dfp_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dfp':
      $output = '<p>' . t('The Doubleclick For Publishers (DFP) module allows you to integrate Google Publisher Tags onto your site.') . '</p>';
      $output .= '<p>' . t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can display your ads as blocks, or add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dfp_permission() {
  return array(
    'administer DFP' => array(
      'title' => t('Administer Doubleclick for Publisher ads'),
      'description' => t('Users can create, edit, and delete Doubleclick for Publishers (dfp) ad tags and configure how and when they should be displayed.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dfp_theme($existing, $type, $theme, $path) {
  $theme_hooks = array(
    'dfp_tag' => array(
      'variables' => array(
        'tag' => NULL,
      ),
      'template' => 'theme/dfp_tag',
    ),
    'dfp_short_tag' => array(
      'variables' => array(
        'tag' => NULL,
      ),
      'template' => 'theme/dfp_short_tag',
    ),
    'dfp_target_settings' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
    'dfp_adsense_color_settings' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_menu().
 */
function dfp_menu() {
  $items = array();

  $items['admin/structure/dfp_ads/settings'] = array(
    'title' => 'Global DFP Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your site-wide DFP settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dfp_admin_settings'),
    'access arguments' => array('administer DFP'),
    'file' => 'dfp.admin.inc',
    'weight' => 5,
  );
  $items['admin/structure/dfp_ads/test_page'] = array(
    'title' => 'DFP Test Page',
    'type' => MENU_LOCAL_TASK,
    'description' => "View all your DFP tags on a single page",
    'page callback' => 'dfp_test_page',
    'access arguments' => array('administer DFP'),
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_init()
 */
function dfp_init() {
  _dfp_js_google_tag_service();
  _dfp_js_header_script();
}

/**
 * Implements hook_block_info().
 */
function dfp_block_info() {
  $tags = _dfp_block_tags();

  $blocks = array();
  foreach ($tags as $tag) {
    $blocks[$tag->machinename]['info'] = t('DFP tag: !tagname', array('!tagname' => $tag->name));
    $blocks[$tag->machinename]['cache'] = DRUPAL_CACHE_PER_PAGE;
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function dfp_block_view($delta) {
  $block['content'] = dfp_tag($delta);

  return $block;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dfp_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_context_registry().
 */
function dfp_context_registry() {
  return array(
    'reactions' => array(
      'dfp_tags' => array(
        'title' => t('DFP tags'),
        'plugin' => 'dfp_context_reaction_tags',
      ),
      'dfp_settings' => array(
        'title' => t('DFP settings'),
        'plugin' => 'dfp_context_reaction_settings',
      ),
    ),
  );
}

/**
 * Implements hook_context_plugins().
 */
function dfp_context_plugins() {
  $plugins = array();
  $plugins['dfp_context_reaction_tags'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dfp') . '/plugins/contexts',
      'file' => 'dfp_context_reaction_tags.inc',
      'class' => 'dfp_context_reaction_tags',
      'parent' => 'context_reaction',
    ),
  );
  $plugins['dfp_context_reaction_settings'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'dfp') . '/plugins/contexts',
      'file' => 'dfp_context_reaction_settings.inc',
      'class' => 'dfp_context_reaction_settings',
      'parent' => 'context_reaction',
    ),
  );
  return $plugins;
}

/**
 * Implements of hook_token_info().
 */
function dfp_token_info() {
  $type = array(
    'name' => t('DFP Ad Tags'),
    'description' => t('Tokens used for building ad tags.'),
    'needs-data' => 'tag',
  );

  $tag['slot'] = array(
    'name' => t('Slot Name'),
    'description' => t("The name of the ad slot defined by this tag."),
  );
  $tag['network_id'] = array(
    'name' => t("Network ID"),
    'description' => t("The unique ID provided by Google."),
  );
  $tag['url:n'] = array(
    'name' => t("URL Parts (n)"),
    'description' => t("Given the current URL of http://site.com/path/to/page, [dfp_tag:url:2] will be replaced with 'path/to'."),
  );

  return array(
    'types' => array('dfp_tag' => $type),
    'tokens' => array('dfp_tag' => $tag),
  );
}

/**
 * Implements of hook_token().
 */
function dfp_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'dfp_tag' && !empty($data['tag'])) {
    $tag = $data['tag'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'slot':
          $replacements[$original] = check_plain($tag->name);
          break;

        case 'network_id':
          $replacements[$original] = check_plain(variable_get('dfp_network_id', ''));
          break;

      }
    }

    if ($created_tokens = token_find_with_prefix($tokens, 'url:n')) {
      foreach ($created_tokens as $name => $original) {
        $url_parts = explode('/', $_GET['q']);
        $replacements[$original] = implode('/', array_slice($url_parts, 0, $name));
      }
    }
  }

  return $replacements;
}

/**
 * Return a render array for the tag specified by machinename.
 */
function dfp_tag($machinename) {
  $tag = dfp_tag_load($machinename);
  $render_array = array();

  if (!empty($tag)) {
    $render_array = array(
      'dfp_wrapper' => array(
        '#type' => 'container',
        '#attributes' => array(
          'id' => $tag->wrapper_id,
          'class' => array(
            'dfp-tag-wrapper',
          ),
        ),
        'tag' => array(
          '#theme' => $tag->short_tag ? 'dfp_short_tag' : 'dfp_tag',
          '#tag' => $tag,
        ),
      ),
    );
    if (!empty($tag->slug)) {
      $render_array['dfp_wrapper']['slug_wrapper'] = array(
        '#type' => 'container',
        '#attributes' => array(
          'class' => array(
            'slug',
          ),
        ),
        'slug' => array(
          '#markup' => $tag->slug,
        ),
        '#weight' => -1,
      );
    }
  }

  return $render_array;
}

/**
 * Load function.
 *
 * @param array or string $machinenames
 *
 * @param boolean $include_disabled
 *
 * @return array or object
 *
 */
function dfp_tag_load($machinenames = array(), $include_disabled = FALSE) {
  ctools_include('export');

  // Ensure that $machinenames is an array in case a string was passed in.
  $machinenames = is_array($machinenames) ? $machinenames : array($machinenames);

  // Grab an array of all DFP tags or the specificed DFP tag.
  if (!empty($machinenames)) {
    // @todo: once the next version of ctools is released, use this instead
    // $tags = ctools_export_crud_load_multiple('dfp_tags', $machinenames);
    $tags = ctools_export_load_object('dfp_tags', 'names', $machinenames);
  }
  else {
    $tags = ctools_export_crud_load_all('dfp_tags');
  }

  // Build up the tag objects.
  foreach ($tags as $key => &$tag) {
    // Initialize the tag before allowing other modules to alter it.
    $tag->settings = is_array($tag->settings) ? $tag->settings : unserialize($tag->settings);

    // Allow modules to alter the (almost) raw tag object.
    drupal_alter('dfp_tag_load', $tag);

    // Store the original tag. This is used by the tag edit form.
    $tag->object = $tag;

    // Move the settings out of the settings array.
    foreach ($tag->settings as $key => $val) {
      $tag->{$key} = $val;
    }

    // Configure this tag based on the defined settings.
    $tag->unit = '/' . variable_get('dfp_network_id', '') . '/' . $tag->name;
    $tag->formatted_size = dfp_format_size($tag->size);
    $tag->wrapper_id = 'dfp-ad-' . $tag->machinename . '-wrapper';
    $tag->placeholder_id = 'dfp-ad-' . $tag->machinename;
    $tag->slug = dfp_format_slug($tag->slug);

    // Allow modules to alter the fully-loaded tag object.
    drupal_alter('dfp_tag', $tag);

    // Handle disabled tags last so that other modules have the opportunity to
    // change the disabled status if needed.
    if (!$include_disabled && isset($tag->disabled) && $tag->disabled) {
      unset($tags[$key]);
    }
  }

  return empty($machinenames) ? $tags : array_shift($tags);
}

/**
 * Save a single tag.
 */
function dfp_tag_save(&$tag) {
  $update = (isset($tag->adid) && is_numeric($tag->adid)) ? array('adid') : array();
  return drupal_write_record('dfp_tag', $tag, $update);
}

/**
 * Alter a dfp tag object to integrate with the contexts module.
 */
function dfp_dfp_tag_load_alter(&$tag) {
  // Remove any disabled tags.
  if (module_exists('context')) {
    // Hide the tag based on the current context.
    if ($plugin = context_get_plugin('reaction', 'dfp_tags')) {
      $plugin->execute($tag);
    }
    // Override the tag's settings based on the current context. This must
    // come after settings is unserialized.
    if ($plugin = context_get_plugin('reaction', 'dfp_settings')) {
      $plugin->execute($tag);
    }
  }
}

/**
 * Alter the vertical tabs group in which the exportable scheduler form should
 * live.
 */
function dfp_exportable_scheduler_form_group_alter(&$group) {
  $group = 'settings';
}

/**
 * Form alter for the ctools_export_ui_edit_item_form.
 */
function dfp_form_ctools_export_ui_edit_item_form_alter(&$form, &$form_state) {
  if (arg(2) == 'context') {
    // Make sure that dfp.admin.inc is included on the context ui form to avoid
    // errors when doing an ajax submit.
    form_load_include($form_state, 'inc', 'dfp', 'dfp.admin');

    // Add the target form validation.
    $form['#validate'][] = 'dfp_targeting_form_validate';
  }
}

/**
 * Page callback for the DFP test page. It displays all tags on the site.
 */
function dfp_test_page() {
  $output = array();
  $tags = dfp_tag_load();

  foreach ($tags as $tag) {
    $tag_name = array(
      'tag name' => array(
        '#markup' => '<h3>' . $tag->name . '</h3>',
      ),
    );
    $tag_tag = dfp_tag($tag->name);
    $tag_devel = array();
    if (module_exists('devel')) {
      $tag_devel['object'] = array(
        '#markup' => kpr($tag, TRUE),
      );
    }
    $output[] = array($tag_name, $tag_tag, $tag_devel);
  }

  return $output;
}

/**
 * Format the given array of values to be displayed as part of a javascript.
 *
 * @param array $variables
 *  'values' => A simple array of targeting values. Ex. val1, val2, val3
 *
 * @return string
 *   If $values had one item, then a string in the format ["val1"]. If $values
 *   has more than one item, then a string in the format ["val1","val2","val3"].
 *
 */
function dfp_format_targeting_values($values) {
  // Convert the values into an array and trim the whitespace from each value.
  $values = explode(',', $values);
  array_filter(array_map('trim', $values));

  $formatted_values = '';

  if (count($values) == 1) {
    $formatted_values = '"' . $values[0] . '"';
  }
  elseif (count($values) > 1) {
    $formatted_values = '["' . implode('","', $values) . '"]';
  }

  return $formatted_values;
}

/**
 * Format the the size of an ad tag.
 *
 * @param array $variables
 *   'size' => A string in the format 123x321,987x789.
 *
 * @return string
 *   A string in the format [456, 654] or [[123, 321], [987, 789]].
 *
 */
function dfp_format_size($size) {
  $formatted_sizes = array();

  $sizes = explode(',', $size);
  foreach ($sizes as $size) {
    $formatted_size = explode('x', trim($size));
    $formatted_sizes[] = '[' . implode(', ', $formatted_size) .']';
  }

  return count($formatted_sizes) == 1 ? $formatted_sizes[0] : '[' . implode(', ', $formatted_sizes) . ']';
}

/**
 * Format the the size of an ad tag.
 *
 * @param array $variables
 *   'slug' => A label for for this particular ad tag.
 *
 * @return string
 *   If $slug is none, an empty string will be returned; if $slug is a non-empty
 *   string then it will be returned unchanged; if $slug is empty, then the
 *   default slug will be returned.
 *
 */
function dfp_format_slug($slug) {
  $formatted_slug = variable_get('dfp_default_slug', '');

  if ($slug == '<none>') {
    $formatted_slug = "";
  }
  elseif (!empty($slug)) {
    $formatted_slug = $slug;
  }

  return $formatted_slug;
}

/**
 * Returns an array dfp tags marked to be displayed as a block.
 */
function _dfp_block_tags() {
  $block_tags = array();
  $tags = dfp_tag_load();

  foreach ($tags as $tag) {
    if ($tag->block) {
      $block_tags[] = $tag;
    }
  }

  return $block_tags;
}

/**
 * Helper function to include external tag service javascript file.
 */
function _dfp_js_google_tag_service() {
  // Inlclude a script tag for the Google Tag Services.
  // @todo: One day this should include an async=true attribute. See #1140356.
  $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
  $options = array(
    'type' => 'external',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
  );
  drupal_add_js($protocol . DFP_GOOGLE_TAG_SERVICES_URL, $options);
}

/**
 * Helper function to include javascript variables, etc in the header above all
 * slot definitions.
 */
function _dfp_js_header_script() {
  // Initialize the google varibales.
  $js = 'var googletag = googletag || {};' . "\n";
  $js .= 'googletag.cmd = googletag.cmd || [];' . "\n";

  // Inject user-defined javascript.
  $js .= variable_get('dfp_injected_js', '') . "\n";

  // Set global targeting values for this page.
  $targeting = variable_get('dfp_targeting', array());
  drupal_alter('dfp_page_targeting', $targeting);
  foreach ($targeting as $key => $target) {
    $js .= 'googletag.pubads().setTargeting("' . $target['target'] . '", ' . dfp_format_targeting_values($target['value']) . ');' . "\n";
  }

  // Add global settings.
  $js = '';
  $js .= 'googletag.cmd.push(function() {' . "\n";
  if (variable_get('dfp_async_rendering', 1)) {
    $js .= '  googletag.pubads().enableAsyncRendering();' . "\n";
  }
  if (variable_get('dfp_single_request', 1)) {
    $js .= '  googletag.pubads().enableSingleRequest();' . "\n";
  }
  if (variable_get('dfp_collapse_empty_divs', 1)) {
    $js .= '  googletag.pubads().collapseEmptyDivs();' . "\n";
  }
  $channel_ids = variable_get('dfp_default_adsense_channel_ids', '');
  if (variable_get('dfp_default_adsense_channel_ids', '')) {
    $js .= '  googletag.pubads().set("adsense_channel_ids", "' . $channel_ids . '");' . "\n";
  }
  $js .= '});' . "\n";
  $js .= 'googletag.enableServices();' . "\n";

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
  );
  drupal_add_js($js, $options);
}

/**
 * Helper function to build the javascript needed to define an ad slot and add
 * it to the head tag.
 */
function _dfp_js_slot_definition($tag) {
  // Add the js needed to define this adSlot to <head>.
  $js = 'googletag.defineSlot("' . $tag->name . '", ' . $tag->formatted_size . ', "' . $tag->placeholder_id . '")' . "\n";
  $js .= '  .addService(googletag.pubads())' . "\n";
  if (!empty($tag->ad_types)) {
    $js .= '  .set("adsense_ad_types", "' . $tag->ad_types . '")' . "\n";
  }

  foreach ($tag->adsense_colors as $key => $val) {
    if (!empty($val)){
      $key = 'adsense_' . $key . '_color';
      $val = '#' . strtoupper($val);
      $js .= '  .set("' . $key . '", "' . $val . '")' . "\n";
    }
  }
  foreach ($tag->targeting as $target) {
    $js .= '  .setTargeting("' . $target['target'] . '", ' . dfp_format_targeting_values($target['value']) . ')' . "\n";
  }
  $js = rtrim($js, "\n") . ';' . "\n";

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
  );
  drupal_add_js($js, $options);
}

/**
 * Preprocess function for DFP tags.
 */
function template_preprocess_dfp_tag(&$variables) {
  $tag = $variables['tag'];

  // Create the attributes for the wrapper div and placeholder div.
  $variables['placeholder_attributes'] = array(
    'id' => $tag->placeholder_id,
    'class' => array(
      'dfp-tag-wrapper',
    ),
  );

  // Define an ad slot for this tag.
  _dfp_js_slot_definition($tag);
}

/**
 * Preprocess function for DFP tags.
 */
function template_preprocess_dfp_short_tag(&$variables) {
  static $tile = 0;
  $tag = $variables['tag'];

  // Build a key|vals array and allow third party modules to modify it.
  $keyvals = array();
  $keyvals['iu'] = $tag->name;
  $keyvals['c'] = rand(100000, 99999);
  $keyvals['size'] = str_replace(',', '|', $tag->size);
  $keyvals['tile'] = ++$tile;

  $targets = array();
  foreach ($tag->targeting as $data) {
    $tagets[] = $data['target'] . '=' . $data['value'];
  }
  if (!empty($targets)) {
    $keyvals['t'] = implode('&', $targets);
  }
  drupal_alter('dfp_short_tag_keyvals', $keyvals);

  $variables['url_jump'] = 'http://' . DFP_GOOGLE_SHORT_TAG_SERVICES_URL . '/jump?' . http_build_query($keyvals);
  $variables['url_ad'] = 'http://' . DFP_GOOGLE_SHORT_TAG_SERVICES_URL . '/ad?' . http_build_query($keyvals);
}
