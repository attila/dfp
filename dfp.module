<?php

define('DFP_GOOGLE_TAG_SERVICES_URL', 'www.googletagservices.com/tag/js/gpt.js');

/**
 * Implements hook_help().
 */
function dfp_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dfp':
      $output = '<p>' . t('The Doubleclick For Publishers (DFP) module allows you to integrate Google Publisher Tags onto your site.') . '</p>';
      $output .= '<p>' . t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can display your ads as blocks, or add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function dfp_permission() {
  return array(
    'administer DFP' => array(
      'title' => t('Administer Doubleclick for Publisher ads'),
      'description' => t('Users can create, edit, and delete Doubleclick for Publishers (dfp) ad tags and configure how and when they should be displayed.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dfp_theme() {
  $theme_hooks = array(
    'dfp_target' => array(
      'render element' => 'form',
      'file' => 'dfp.admin.inc',
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_menu().
 */
function dfp_menu() {
  $items = array();

  $items['admin/structure/dfp_ads/settings'] = array(
    'title' => 'Global DFP Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your site-wide DFP settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dfp_admin_settings'),
    'access arguments' => array('administer DFP'),
    'file' => 'dfp.admin.inc',
    'weight' => 5,
  );
  $items['admin/structure/dfp_ads/test_page'] = array(
    'title' => 'DFP Test Page',
    'type' => MENU_LOCAL_TASK,
    'description' => "View all your DFP tags on a single page",
    'page callback' => 'dfp_test_page',
    'access arguments' => array('administer DFP'),
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_init()
 */
function dfp_init() {
  _dfp_js_google_tag_service_include();
  _dfp_js_header_script();
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function dfp_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Load function.
 */
function dfp_tag_load($machinename = '') {
  ctools_include('export');

  // Grab an array of all DFP tags or the specificed DFP tag.
  if (empty($machinename)) {
    $tags = ctools_export_load_object('dfp_tags');
  }
  else {
    $tags = ctools_export_load_object('dfp_tags', 'names', array($machinename));
  }

  // Build up the tag objects.
  foreach ($tags as &$tag) {
    $tag->settings = is_array($tag->settings) ? $tag->settings : unserialize($tag->settings);
  }

  return empty($machinename) ? $tags : array_shift($tags);
}

/**
 * Save a single tag.
 */
function dfp_tag_save(&$tag) {
  $update = (isset($tag->adid) && is_numeric($tag->adid)) ? array('adid') : array();
  return drupal_write_record('dfp_tag', $tag, $update);
}

/**
 * Helper function to include external tag service javascript file.
 */
function _dfp_js_google_tag_service_include() {
  // Inlclude a script tag for the Google Tag Services.
  // @todo: One day this should include an async=true attribute. See #1140356.
  $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
  $options = array(
    'type' => 'external',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
    'weight' => -25,
  );
  drupal_add_js($protocol . DFP_GOOGLE_TAG_SERVICES_URL, $options);
}

/**
 * Helper function to include javascript variables, etc in the header above all
 * slot definitions.
 */
function _dfp_js_header_script() {
  // Initialize the google varibales.
  $js = 'var googletag = googletag || {};' . "\n";
  $js .= 'googletag.cmd = googletag.cmd || [];' . "\n";

  // Set global dfp settings.
  $js .= 'googletag.cmd.push(function() {' . "\n";
  if (variable_get('dfp_collapse_empty_divs', 1)) {
    $js .= '  googletag.pubads().collapseEmptyDivs();' . "\n";
  }
  if (variable_get('dfp_async_rendering', 1)) {
    $js .= '  googletag.pubads().enableAsyncRendering();' . "\n";
  }
  else {
    $js .= '  googletag.pubads().enableSyncRendering();' . "\n";
  }
  if (variable_get('dfp_single_request', 1)) {
    $js .= '  googletag.pubads().enableSingleRequest();' . "\n";
  }
  $js .= '});' . "\n";

  // Inject user-defined javascript.
  $js .= variable_get('dfp_injected_js', '') . "\n";

  // Set global targeting values for this page.
  $targeting = variable_get('dfp_targeting', array());
  drupal_alter('dfp_page_targeting', $targeting);
  foreach ($targeting as $key => $target) {
    $js .= 'googletag.pubads().setTargeting("' . $target['target'] . '", ' . _dfp_format_target_value($target['value']) . ');' . "\n";
  }

  $options = array(
    'type' => 'inline',
    'group' => JS_LIBRARY,
    'every_page' => TRUE,
    'weight' => -25,
  );
  drupal_add_js(rtrim($js, "\n"), $options);
}

/**
 * Format the given array of values to be displayed as part of a javascript.
 */
function _dfp_format_target_value($values) {
  $formatted_values = '';

  // Convert the values into an array and trim the whitespace from each value.
  $values = explode(',', $values);
  array_filter(array_map('trim', $values));

  if (count($values) == 1) {
    $formatted_values = '"' . $values[0] . '"';
  }
  elseif (count($values) > 1) {
    $formatted_values = '["' . implode('","', $values) . '"]';
  }

  return $formatted_values;
}
